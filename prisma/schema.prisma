// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  player        Player?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Kingdom {
  id          String    @id @default(cuid())
  name        String    @unique
  maxPlayers  Int       @default(50)
  createdAt   DateTime  @default(now())
  players     Player[]
  mapTiles    MapTile[]
}

model Player {
  id          String    @id @default(cuid())
  userId      String    @unique
  kingdomId   String
  name        String
  gender      String    // 'male' or 'female'
  avatar      String    // URL to avatar image
  createdAt   DateTime  @default(now())
  cities      City[]
  kingdom     Kingdom   @relation(fields: [kingdomId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model City {
  id          String    @id @default(cuid())
  name        String
  playerId    String
  mapTileId   String    @unique
  population  Int       @default(100)
  resources   Json      // Store resources as JSON
  buildings   Json      // Store buildings as JSON
  createdAt   DateTime  @default(now())
  player      Player    @relation(fields: [playerId], references: [id])
  mapTile     MapTile   @relation(fields: [mapTileId], references: [id])
}

model MapTile {
  id          String    @id @default(cuid())
  kingdomId   String
  type        String    // 'plains', 'lakes', 'forests', 'hills', 'mountains', 'moors', 'ruins'
  x           Int
  y           Int
  resources   Json      // Store available resources as JSON
  city        City?
  kingdom     Kingdom   @relation(fields: [kingdomId], references: [id])

  @@unique([kingdomId, x, y])
}
